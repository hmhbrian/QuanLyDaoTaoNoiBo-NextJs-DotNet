// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLDT_Becamex.Src.Infrastructure.Persistence;

#nullable disable

namespace QLDT_Becamex.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250812085639_UpdateCourseDescriptionColumnType")]
    partial class UpdateCourseDescriptionColumnType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<int?>("ELevelId")
                        .HasColumnType("int")
                        .HasColumnName("elevel_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndWork")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_work");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("IdCard")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("id_card");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerUId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("manager_u_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedFullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("normalized_full_name");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartWork")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_work");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("update_by_id");

                    b.Property<string>("UrlAvatar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("url_avatar");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ELevelId");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_ApplicationUser_Email");

                    b.HasIndex("ManagerUId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedFullName")
                        .HasDatabaseName("IX_ApplicationUser_NormalizedFullName");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateById");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("action");

                    b.Property<string>("Changes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("changes");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("entity_name");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("time_stamp");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Certificates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("certificate_url");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Certificates", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("Format")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("format");

                    b.Property<int?>("HoursPerSessions")
                        .HasColumnType("int")
                        .HasColumnName("hours_per_sessions");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_private");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int")
                        .HasColumnName("lecturer_id");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location");

                    b.Property<int?>("MaxParticipant")
                        .HasColumnType("int")
                        .HasColumnName("max_participant");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizeCourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("NormalizeCourseName");

                    b.Property<string>("Objectives")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("objectives");

                    b.Property<string>("Optional")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("optional");

                    b.Property<DateTime?>("RegistrationClosingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_closing_date");

                    b.Property<DateTime?>("RegistrationStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_start_date");

                    b.Property<int?>("Sessions")
                        .HasColumnType("int")
                        .HasColumnName("sessions");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("ThumbUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("thumb_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<string>("UpdatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("update_by_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .HasDatabaseName("IX_Course_Code");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NormalizeCourseName")
                        .HasDatabaseName("IX_Course_NormalizedCourseName");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseAttachedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Link")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("link");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<string>("PublicIdUrlPdf")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("public_id_url_pdf");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<int>("TypeDocId")
                        .HasColumnType("int")
                        .HasColumnName("type_doc_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TypeDocId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseAttachedFile", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("course_id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CourseDepartment", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseELevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("course_id");

                    b.Property<int>("ELevelId")
                        .HasColumnType("int")
                        .HasColumnName("elevel_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ELevelId");

                    b.ToTable("CourseELevel", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Key")
                        .HasMaxLength(255)
                        .HasColumnType("int")
                        .HasColumnName("key");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("CourseStatus", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("department_code");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("department_name");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("manager_id");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("DepartmentId");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[manager_id] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.DepartmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("DepartmentStatus", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.EmployeeLevel", b =>
                {
                    b.Property<int>("ELevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("elevel_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ELevelId"));

                    b.Property<string>("ELevelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("elevel_name");

                    b.HasKey("ELevelId");

                    b.ToTable("EmployeeLevel", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Q1_relevance")
                        .HasColumnType("int")
                        .HasColumnName("q1_relevance");

                    b.Property<int>("Q2_clarity")
                        .HasColumnType("int")
                        .HasColumnName("q2_clarity");

                    b.Property<int>("Q3_structure")
                        .HasColumnType("int")
                        .HasColumnName("q3_structure");

                    b.Property<int>("Q4_duration")
                        .HasColumnType("int")
                        .HasColumnName("q4_duration");

                    b.Property<int>("Q5_material")
                        .HasColumnType("int")
                        .HasColumnName("q5_material");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("feedback_at");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("file_url");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<string>("PublicIdUrlPdf")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("public_id_url_pdf");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("TotalDurationSeconds")
                        .HasColumnType("int")
                        .HasColumnName("total_duration_seconds");

                    b.Property<int?>("TotalPages")
                        .HasColumnType("int")
                        .HasColumnName("total_pages");

                    b.Property<int>("TypeDocId")
                        .HasColumnType("int")
                        .HasColumnName("type_doc_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TypeDocId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.LessonProgress", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.Property<int?>("CurrentPage")
                        .HasColumnType("int")
                        .HasColumnName("current_page");

                    b.Property<int?>("CurrentTimeSeconds")
                        .HasColumnType("int")
                        .HasColumnName("current_time_seconds");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("last_accessed")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonProgress", null, t =>
                        {
                            t.HasCheckConstraint("CK_Progress_Type", "(current_time_seconds IS NOT NULL AND current_page IS NULL) OR (current_time_seconds IS NULL AND current_page IS NOT NULL) OR (current_time_seconds IS NULL AND current_page IS NULL)");
                        });
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("A")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("a");

                    b.Property<string>("B")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("b");

                    b.Property<string>("C")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("c");

                    b.Property<string>("CorrectOption")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("correct_option");

                    b.Property<string>("CreateById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("D")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("d");

                    b.Property<string>("Explanation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("explanation");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("question_text");

                    b.Property<int?>("QuestionType")
                        .HasColumnType("int")
                        .HasColumnName("question_type");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.Property<string>("UpdateById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("update_by_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("TestId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<float>("PassThreshold")
                        .HasColumnType("real")
                        .HasColumnName("pass_threshold");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<int>("TimeTest")
                        .HasColumnType("int")
                        .HasColumnName("time_test");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tests", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.TestResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("CorrectAnswerCount")
                        .HasColumnType("int")
                        .HasColumnName("correct_answer_count");

                    b.Property<int>("IncorrectAnswerCount")
                        .HasColumnType("int")
                        .HasColumnName("incorrect_answer_count");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("is_done");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit")
                        .HasColumnName("is_passed");

                    b.Property<float>("Score")
                        .HasColumnType("real")
                        .HasColumnName("score");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("started_at");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("submitted_at");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.TypeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Key")
                        .HasColumnType("int")
                        .HasColumnName("key");

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name_type");

                    b.HasKey("Id");

                    b.ToTable("TypeDocument", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<string>("SelectedOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("selected_options");

                    b.Property<string>("TestResultId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("test_result_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestResultId");

                    b.ToTable("UserAnswers", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.UserCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("assigned_at");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit")
                        .HasColumnName("is_mandatory");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<int>("Optional")
                        .HasColumnType("int")
                        .HasColumnName("Optional");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourse", (string)null);
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("UserStatus", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.EmployeeLevel", "ELevel")
                        .WithMany("Users")
                        .HasForeignKey("ELevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "ManagerU")
                        .WithMany("Children")
                        .HasForeignKey("ManagerUId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("Department");

                    b.Navigation("ELevel");

                    b.Navigation("ManagerU");

                    b.Navigation("UpdateBy");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Certificates", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Course", "Course")
                        .WithMany("Certificates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Course", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.CourseCategory", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.CourseStatus", "Status")
                        .WithMany("Courses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("CreateBy");

                    b.Navigation("Status");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseAttachedFile", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Course", "Course")
                        .WithMany("AttachedFiles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.TypeDocument", "TypeDoc")
                        .WithMany()
                        .HasForeignKey("TypeDocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_AttachedFile_type_document");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("TypeDoc");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseDepartment", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Course", "Course")
                        .WithMany("CourseDepartments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Department", "Department")
                        .WithMany("CourseDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseELevel", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Course", "Course")
                        .WithMany("CourseELevels")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.EmployeeLevel", "ELevel")
                        .WithMany("CourseELevel")
                        .HasForeignKey("ELevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ELevel");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Department", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "Manager")
                        .WithOne()
                        .HasForeignKey("QLDT_Becamex.Src.Domain.Entities.Department", "ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.DepartmentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");

                    b.Navigation("Parent");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_lessons_courses");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lessons_user_created");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.TypeDocument", "TypeDoc")
                        .WithMany()
                        .HasForeignKey("TypeDocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_type_document");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lessons_user_edited");

                    b.Navigation("Course");

                    b.Navigation("CreatedBy");

                    b.Navigation("TypeDoc");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.LessonProgress", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonProgress")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_lesson_progress_lesson");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "User")
                        .WithMany("LessonProgress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_lesson_progress_user");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Question", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_tests");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("Test");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Test", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Course", "Course")
                        .WithMany("Tests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_tests_courses");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_tests_user_updated");

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_tests_user_edited");

                    b.Navigation("Course");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.TestResult", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.UserAnswer", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.TestResult", "TestResult")
                        .WithMany("UserAnswers")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.UserCourse", b =>
                {
                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserCourse")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Children");

                    b.Navigation("LessonProgress");

                    b.Navigation("UserCourse");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Course", b =>
                {
                    b.Navigation("AttachedFiles");

                    b.Navigation("Certificates");

                    b.Navigation("CourseDepartments");

                    b.Navigation("CourseELevels");

                    b.Navigation("Lessons");

                    b.Navigation("Tests");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.CourseStatus", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Department", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("CourseDepartments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.EmployeeLevel", b =>
                {
                    b.Navigation("CourseELevel");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("LessonProgress");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("QLDT_Becamex.Src.Domain.Entities.TestResult", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
